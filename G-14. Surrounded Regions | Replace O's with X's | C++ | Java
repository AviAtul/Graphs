class Solution {
public:

    void dfs(vector<vector<char>>& board, int r, int c, vector<vector<int>>& visited){
        visited[r][c] = 1;
        vector<pair<int,int>> dirs = {{-1,0},{0,-1},{0,1},{1,0}};
        for(auto [dx,dy]: dirs){
            int nr = dx+r;
            int nc = dy+c;
            if(nr<0 || nc<0 || nr>=board.size() || nc>=board[0].size())continue;
            if(visited[nr][nc]==1 || board[nr][nc]=='X')continue;
            dfs(board,nr,nc,visited);
        }
    }

    void solve(vector<vector<char>>& board) {
        if(board.size()<=1 || board[0].size()<=1)return;
        vector<vector<int>> visited(board.size(), vector<int>(board[0].size(), 0));
        
        for(int i = 0; i<board[0].size(); i++){
            if(board[0][i]=='O' && visited[0][i]==0)dfs(board,0,i,visited);
            if(board[board.size()-1][i]=='O' && visited[board.size()-1][i]==0)dfs(board,board.size()-1,i,visited);
        }for(int i = 0; i<board.size(); i++){
            if(board[i][0]=='O' && visited[i][0]==0)dfs(board,i,0,visited);
            if(board[i][board[0].size()-1]=='O' && visited[i][board[0].size()-1]==0)dfs(board,i,board[0].size()-1,visited);
        }for(int i = 0; i<board.size(); i++){
            for(int j = 0; j<board[0].size(); j++){
                if(visited[i][j]==0 && board[i][j]=='O')board[i][j]='X';
            }
        }
    }
};
Time Complexity: O(N) + O(M) + O(NxMx4) ~ O(N x M), For the worst case, every element will be marked as ‘O’ in the matrix, and the DFS function will be called for (N x M) nodes and for every node, we are traversing for 4 neighbors, so it will take O(N x M x 4) time. Also, we are running loops for boundary elements so it will take O(N) + O(M).

Space Complexity ~ O(N x M), O(N x M) for the visited array, and auxiliary stack space takes up N x M locations at max. 
