class Solution {
  public:
    bool dfs(int V, vector<int> adj[], int sv, vector<int> &visited, int parent = -1){
        visited[sv] = 1;
        for(auto node : adj[sv]){
            if(visited[node]==0){
                if(dfs(V,adj,node,visited,sv))return true;
            }
            else if(node != parent)return true;
        }return false;
    }
    
    bool isCycle(int V, vector<int> adj[]) {
        vector<int> visited(V,0);
        for(int i = 0; i<V; i++){
            if(visited[i]==0){
                bool ans = dfs(V,adj,i,visited);
                if(ans)return true;
            }
        }return false;
    }
};

Time Complexity: O(N + 2E) + O(N), Where N = Nodes, 2E is for total degrees as we traverse all adjacent nodes. In the case of connected components of a graph, it will take another O(N) time.

Space Complexity: O(N) + O(N) ~ O(N), Space for recursive stack space and visited array.
