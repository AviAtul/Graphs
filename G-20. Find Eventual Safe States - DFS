class Solution {
private:
    bool dfs(vector<vector<int>>& graph, vector<int>& visited, vector<int>& pathVisited, int sv, vector<int>& check){
        visited[sv] = 1;
        pathVisited[sv] = 1;
        check[sv] = 0;
        for(auto node: graph[sv]){
            if(!visited[node]){
                if(dfs(graph, visited, pathVisited, node, check))return true;
            }else if(pathVisited[node])return true;
        }pathVisited[sv] = 0;
        check[sv] = 1;
        return false;
    }
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        vector<int> answer;
        vector<int> visited(graph.size(), 0);
        vector<int> pathVisited(graph.size(), 0);
        vector<int> check(graph.size());
        for(int i = 0; i<visited.size(); i++){
            if(visited[i]==0)dfs(graph, visited, pathVisited,i, check);
        }for(int i = 0; i<graph.size(); i++){
            if(check[i]==1)answer.push_back(i);
        }return answer;
    }
};
