class Solution {
  private:
        void dfs(vector<vector<int>>& grid, int r, int c, vector<vector<int>> &visited,
        vector<pair<int,int>> &vec, int r0, int c0){
            int m = grid.size();
            int n = grid[0].size(); 
            visited[r][c] = 1;
            vec.push_back({r-r0,c-c0});
            vector<pair<int,int>> dirs = {{-1,0},{0,-1},{0,1},{1,0}};
            for(auto dir: dirs){
                int nr = r+dir.first;
                int nc = c+dir.second;
                if(nr>=0 && nr<m && nc>=0 && nc<n && visited[nr][nc]==0 && grid[nr][nc]==1){
                    dfs(grid,nr,nc,visited,vec,r0,c0);
                }
            }
        }
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        vector<vector<int>> visited(m, vector<int>(n,0));
        set<vector<pair<int,int>>>st;
        for(int i = 0; i<m; i++){
            for(int j = 0; j<n; j++){
                if(!visited[i][j] && grid[i][j]==1){
                    vector<pair<int,int>> vec;
                    dfs(grid,i,j,visited,vec, i, j);
                    st.insert(vec);
                }
            }
        }return st.size();
    }
};

Time Complexity: O(m*n*log(n*m)+O(m*n*4)
Space Complexity: O(m*n)+O(m*n)
