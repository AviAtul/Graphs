class Solution {
public:

    void dfs(vector<vector<int>>& image, int sr, int sc, int color){
        int curr_color = image[sr][sc];
        image[sr][sc] = color;
        if(curr_color==color)return;
        vector<pair<int, int>> dir = {{-1,0},{0,-1},{0,1},{1,0}};
        for(auto [dx,dy]:dir){
            int nr = dx+sr;
            int nc = dy+sc;
            if(nr<0||nr>=image.size()||nc<0||nc>=image[0].size())continue;
            if(image[nr][nc]==color)continue;
            if(image[nr][nc]==curr_color){
                dfs(image,nr,nc,color);
            }
        }

    }

    vector<vector<int>> floodFill(vector<vector<int>>& image, int sr, int sc, int color) {
        if(image.size()==0)return{{}};
        dfs(image, sr, sc, color);
        return image;
    }
};

Time Complexity: O(NxM + NxMx4) ~ O(N x M)
For the worst case, all of the pixels will have the same colour, so DFS function will be called for (N x M) nodes and for every node we are traversing for 4 neighbours, so it will take O(N x M x 4) time.

Space Complexity: O(N x M) + O(N x M)
O(N x M) for copied input array and recursive stack space takes up N x M locations at max. 
