DFS/Depth Wise Traversal

#include <bits/stdc++.h>
using namespace std;

class Solution {
  public:
    vector<int> dfs(vector<int> adj[], int* visited, vector<int> & ans, int sv){
        ans.push_back(sv);
        visited[sv] = 1;
        for(auto i:adj[sv]){
            if(!visited[i])dfs(adj,visited,ans,i);
        }return ans;
    }
    vector<int> dfsOfGraph(int n, vector<int> adj[]) {
        int vis[n] = {0};
        if(n==0)return {};
        vector<int> ans;
        int sv = 0;
        return dfs(adj, vis, ans, sv);
    }
};


int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        // string s1;
        // cin>>s1;
        Solution obj;
        vector<int> ans = obj.dfsOfGraph(V, adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
    }
    return 0;
}
//Space Complexity: O(n) + O(n) + O(n) + O(n) 
//Time Complexity: O(n) + O(2*E)
