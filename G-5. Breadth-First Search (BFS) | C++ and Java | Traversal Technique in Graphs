BFS/Level Wise Traversal


#include <bits/stdc++.h>
using namespace std;

class Solution {
  public:
    vector<int> bfsOfGraph(int n, vector<int> adj[]) {
        if(n==0)return {};
        queue<int> q;
        bool* visited = new bool[n];
        for(int i = 0; i<n; i++){
            visited[i] = false;
        }visited[0] = true;
        q.push(0);
        vector<int> answer;
        while(!q.empty()){
            int first = q.front();
            q.pop();
            answer.push_back(first);
            for(int i = 0; i<adj[first].size(); i++){
                if(!visited[adj[first][i]]){
                    q.push(adj[first][i]);
                    visited[adj[first][i]] = true;
                }
            }
        }delete [] visited;
        return answer;
        
    }
};


int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;

        vector<int> adj[V];

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            // 		adj[v].push_back(u);
        }
        Solution obj;
        vector<int> ans = obj.bfsOfGraph(V, adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
    }
    return 0;
}

//Space Complexity: 0(3n)
//TIme Complexity: O(n)+O(2*E)
