class Solution {
public:

    void dfs(vector<vector<int>>& board, int r, int c, vector<vector<int>>& visited){
        visited[r][c] = 1;
        vector<pair<int,int>> dirs = {{-1,0},{0,-1},{0,1},{1,0}};
        for(auto [dx,dy]: dirs){
            int nr = dx+r;
            int nc = dy+c;
            if(nr<0 || nc<0 || nr>=board.size() || nc>=board[0].size())continue;
            if(visited[nr][nc]==1 || board[nr][nc]==0)continue;
            dfs(board,nr,nc,visited);
        }
    }

    int numEnclaves(vector<vector<int>>& board) {
        int ans = 0;
        vector<vector<int>> visited(board.size(), vector<int>(board[0].size(), 0));
        for(int i = 0; i<board[0].size(); i++){
            if(board[0][i]==1 && visited[0][i]==0)dfs(board,0,i,visited);
            if(board[board.size()-1][i]==1 && visited[board.size()-1][i]==0)dfs(board,board.size()-1,i,visited);
        }for(int i = 0; i<board.size(); i++){
            if(board[i][0]==1 && visited[i][0]==0)dfs(board,i,0,visited);
            if(board[i][board[0].size()-1]==1 && visited[i][board[0].size()-1]==0)dfs(board,i,board[0].size()-1,visited);
        }for(int i = 0; i<board.size(); i++){
            for(int j = 0; j<board[0].size(); j++){
                if(visited[i][j]==0 && board[i][j]==1)ans++;
            }
        }return ans;
    }
};
